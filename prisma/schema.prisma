// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  password     String
  provider     String   @default("local")
  name         String?
  role         String   @default("user")
  isBanned     Boolean  @default(false)
  refreshToken String?
  createdAt    DateTime @default(now())
  point        Int      @default(1000)

  rsoAccount RsoAccount? @relation("UserRsoRelation")

 // üîΩ Ï∂îÍ∞Ä Í¥ÄÍ≥Ñ ÌïÑÎìúÎì§
  bets         Bet[]       @relation("UserBets")
  feeds        Feed[]      @relation("UserFeeds")
  comments     Comment[]   @relation("UserComments")
  Like       Like[]
}


model RsoAccount {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  puuid    String @unique
  gameName String
  tagLine  String

  userId String? @unique @db.ObjectId // ‚úÖ Ïó¨Í∏∞Ïóê @unique Ï∂îÍ∞Ä

  user User? @relation("UserRsoRelation", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rank {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  puuid        String  @unique
  leaguePoints Int
  rank         String
  wins         Int
  losses       Int
  veteran      Boolean
  inactive     Boolean
  freshBlood   Boolean
  hotStreak    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile? @relation(fields: [puuid], references: [puuid])
}

model Profile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  puuid         String   @unique
  summonerName  String
  profileIconId Int
  revisionDate  Int
  summonerLevel Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  rank          Rank?
}

model Feed {
  feedID    String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userID    String   @db.ObjectId
  imageUrl  String?   @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]

  user      User      @relation("UserFeeds", fields: [userID], references: [id])

  likes Like[] @relation("FeedLikes")
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userID String @db.ObjectId
  feedID String @db.ObjectId

  user User @relation(fields: [userID], references: [id])
  feed Feed @relation("FeedLikes", fields: [feedID], references: [feedID])

  createdAt DateTime @default(now())

  @@unique([userID, feedID]) // Ï§ëÎ≥µ Ï¢ãÏïÑÏöî Î∞©ÏßÄ
}

model Comment {
  commentID String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userID    String   @db.ObjectId
  feedID    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feed Feed @relation(fields: [feedID], references: [feedID])
  user      User     @relation("UserComments", fields: [userID], references: [id])
}

model Bet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId   Int
  team      String
  amount    Int
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation("UserBets", fields: [userId], references: [id])
}

model Match {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId        Int      @unique
  name           String
  league         String
  blueTeam       String?
  redTeam        String?
  startTime      DateTime
  endTime        DateTime?
  winner         String?
  /** ÏÉàÎ°ú Ï∂îÍ∞Ä ‚Üì */
  settled        Boolean  @default(false)   // Î≤†ÌåÖ Ï†ïÏÇ∞ Ïó¨Î∂Ä
  result         String?                   // "blue" | "red" Îì±
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}



model EsportsRanking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  league    String // Ïòà: "LCK"
  season    String // Ïòà: "2025 Spring"
  data      Json // ÏàúÏúÑÌëú Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ (TeamStanding[])
  updatedAt DateTime @updatedAt

  @@unique([league, season], name: "league_season")
}

model EsportsRoster {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  league    String // Ïòà: "LCK"
  season    String // Ïòà: "2025 Spring"
  data      Json // Ï†ÑÏ≤¥ ÌåÄ/ÏÑ†Ïàò Î°úÏä§ÌÑ∞ Îç∞Ïù¥ÌÑ∞
  updatedAt DateTime @updatedAt

  @@unique([league, season], name: "league_season_roster")
}
