

// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  email        String      @unique
  password     String
  provider     String      @default("local")
  name         String?
  role         String      @default("user")
  isBanned     Boolean     @default(false)
  refreshToken String?
  createdAt    DateTime    @default(now())
  point        Int         @default(1000)

  rsoAccount   RsoAccount? @relation("UserRsoRelation")  // ✅ 관계 이름 명시
}

model RsoAccount {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  puuid     String   @unique
  gameName  String
  tagLine   String

  userId    String?  @unique @db.ObjectId  // ✅ 여기에 @unique 추가

  user      User?    @relation("UserRsoRelation", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Rank {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  summonerId   String  @unique
  puuid        String  @unique
  leaguePoints Int
  rank         String
  wins         Int
  losses       Int
  veteran      Boolean
  inactive     Boolean
  freshBlood   Boolean
  hotStreak    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile? @relation(fields: [puuid], references: [puuid])
}

model Profile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId     String   @unique
  puuid         String   @unique
  summonerName  String
  profileIconId Int
  revisionDate  Int
  summonerLevel Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  rank          Rank?
}

model Feed {
  feedID    String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userID    String
  imageUrl  String?   @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Comment {
  commentID String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userID    String
  feedID    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feed Feed @relation(fields: [feedID], references: [feedID])
}

model Bet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId   Int
  team      String
  amount    Int
  userId    String
  createdAt DateTime @default(now())

}


model Match {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId   Int      @unique
  name      String
  league    String?
  blueTeam  String?
  redTeam   String?
  startTime DateTime
  result    String?
  settled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EsportsRanking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  league   String   // 예: "LCK"
  season   String   // 예: "2025 Spring"
  data     Json     // 순위표 전체 데이터 (TeamStanding[])
  updatedAt DateTime @updatedAt

  @@unique([league, season], name: "league_season")
}

model EsportsRoster {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  league   String   // 예: "LCK"
  season   String   // 예: "2025 Spring"
  data     Json     // 전체 팀/선수 로스터 데이터
  updatedAt DateTime @updatedAt

  @@unique([league, season], name: "league_season_roster")
}
